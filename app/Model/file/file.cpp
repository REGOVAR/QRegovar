#include "file.h"



File::File(QObject* parent) : QObject(parent)
{
}




bool File::fromJson(QJsonDocument json)
{
    QJsonObject data = json.object();
    return fromJson(data);
}


bool File::fromJson(QJsonObject json)
{

    mId = json["id"].toInt();
    setName(json["name"].toString());
    setComment(json["comment"].toString());
    mUrl = QUrl(json["path"].toString());
    mCreationDate = QDateTime::fromString(json["creation_date"].toString());
    mUpdateDate = QDateTime::fromString(json["update_date"].toString());
    emit updateDateChanged();
    setMd5Sum(json["md5sum"].toString());
    setType(json["type"].toString());
    setSize(json["size"].toInt());
    setUploadOffset(json["upload_offset"].toInt());


    auto meta = QMetaEnum::fromType<FileStatus>();
    setStatus(static_cast<FileStatus>(meta.keyToValue(json["status"].toString().toStdString().c_str()))); // T_T .... tout ça pour ça ....

    QJsonObject filenameInfo;
    filenameInfo.insert("icon", extensionToIco(mType));
    filenameInfo.insert("filename", mName);
    mFilenameUI = QVariant::fromValue(filenameInfo);
    emit filenameUIChanged();

    QJsonObject statusInfo;
    statusInfo.insert("status", mStatus);
    statusInfo.insert("label", statusToLabel(mStatus, mSize, mUploadOffset));
    mStatusUI = QVariant::fromValue(statusInfo);
    emit statusUIChanged();

    mSizeUI = sizeToHumanReadable(mSize, mUploadOffset);
    emit sizeUIChanged();
    mSourceUI = (json["job_source_id"].toBool()) ? tr("Generated by analysis") : tr("Uploaded by user");
    emit sourceUIChanged();


    // TODO
    //mTags;
    //mSource;
    //mLocalPath;

    return true;
}




QString File::extensionToIco(QString ext)
{
    return "T";
}
QString File::sizeToHumanReadable(qint64 size, qint64 uploadOffset)
{
    return "1.2 Go";
}
QString File::statusToLabel(FileStatus status, qint64 size, qint64 uploadOffset)
{
    return tr("Uploaded");
}
